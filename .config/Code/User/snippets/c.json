{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"jumpstart": {
		"prefix": "]",
		"body": [
			"#include <stdio.h>",
			"",
			"int main()",
			"{",
			"\t$0",
			"\treturn 0;",
			"}"
		],
		"description": "c boilerplate"
	},
	"printf": {
		"prefix": ",",
		"body": [
			"printf(\"$1\"$0);",
		],
		"description": "elvinprintfunc"
	},
	"pf_int": {
		"prefix": "pd",
		"body": [
			"printf(\"%d\",$0);",
		],
		"description": "decimal"
	},
	"pf_float": {
		"prefix": "pf",
		"body": [
			"printf(\"%.2f\",$0);",
		],
		"description": "float"
	},
	"pf_str": {
		"prefix": "ps",
		"body": [
			"printf(\"%s\",$0);",
		],
		"description": "str"
	},
	"puts_str": {
		"prefix": "put",
		"body": [
			"puts($0);",
		],
		"description": "puts(str)"
	},
	"pf_char": {
		"prefix": "pc",
		"body": [
			"printf(\"%c\",$0);",
		],
		"description": "char"
	},
	"scanf": {
		"prefix": ".",
		"body": [
			"scanf(\"%$1\",&$0);",
		],
		"description": "elvinscanfunction"
	},
	"sf_d": {
		"prefix": "sd",
		"body": [
			"scanf(\"%d\",&$0);",
		],
		"description": "decimal"
	},
	"sf_f": {
		"prefix": "sf",
		"body": [
			"scanf(\"%f\",&$0);",
		],
		"description": "float"
	},
	"sf_s": {
		"prefix": "ss",
		"body": [
			"scanf(\"%s\",$0);",
		],
		"description": "str"
	},
	"sf_c": {
		"prefix": "sc",
		"body": [
			"scanf(\"%c\",&$0);",
		],
		"description": "char"
	},
	"pointer": {
		"prefix": "ptr",
		"body": [
			"${1:datatype} ${2:variable}=$0,*ptr=&${2:variable};",
		],
		"description": "ptr snippet"
	},
	"print": {
		"prefix": "easy",
		"body": [
			"void print(const char* fmt, ...)",
			"{",
			"\tva_list args;",
			"\tva_start(args, fmt);",
			"\twhile (*fmt != '\\0')",
			"\t{",
			"\t\tif (*fmt == 'd') ",
			"\t\t{",
			"\t\t\tint i = va_arg(args, int);",
			"\t\t\tprintf(\"%d \", i);",
			"\t\t}",
			"\t\telse if (*fmt == 'c')",
			"\t\t{",
			"\t\t\tint c = va_arg(args, int);",
			"\t\t\tprintf(\"%c \", c);",
			"\t\t}",
			"\t\telse if (*fmt == 'f')",
			"\t\t{",
			"\t\t\tdouble d = va_arg(args, double);",
			"\t\t\tprintf(\"%f \", d);",
			"\t\t}",
			"\t\telse if (*fmt == 's')",
			"\t\t{",
			"\t\t\tchar* string=va_arg(args, char*);",
			"\t\t\tfor (int i = 0; string[i]!='\\0'; i++)",
			"\t\t\t{",
			"\t\t\t\tputchar(string[i]);",
			"\t\t\t}",
			"\t\t\tputchar(' ');",
			"\t\t}",
			"\t\t++fmt;",
			"\t}",
			"\tva_end(args);",
			"}",
			"\n",
			"$0"
		],
		"description": "print(char* format, argv"
	},
	"stack": {
		"prefix": "stack",
		"body": [
			" struct Stack ",
			" { ",
			"char* arr;",
			"    int ptr;",
			"    int size;",
			"};",
			"",
			"struct Stack* mkStack(int size)",
			"{",
			"    struct Stack* temp = (struct Stack*)malloc(sizeof(struct Stack));",
			"    temp->arr = NULL;",
			"    temp->ptr = (-1);",
			"    temp->size = size;",
			"    return temp;",
			"}",
			"",
			"int isEmpty(struct Stack* stack) { return (stack->ptr == -1);",
			"}",
			"",
			"int isFull(struct Stack* stack) { return (stack->ptr == stack->size - 1);",
			"}",
			"",
			"int top(struct Stack* stk)",
			"{",
			"    if (!isEmpty(stk))",
			"        return stk->arr[stk->ptr",
			"];",
			"    return INT_MIN;",
			"}",
			"",
			"void addstack(struct Stack* stk)",
			"{",
			"    stk->size *= 2;",
			"    stk->arr = (int*)realloc(stk->arr, stk->size * sizeof(int));",
			"}",
			"",
			"void push(struct Stack* stk, int num)",
			"{",
			"    if (!stk->arr)",
			"        stk->arr = (int*)calloc(stk->size, sizeof(int));",
			"    if (isFull(stk))",
			"        addstack(stk);",
			"    stk->arr[++stk->ptr",
			"] = num;",
			"}",
			"",
			"void pop(struct Stack* stk)",
			"{",
			"    if (!isEmpty(stk))",
			"        stk->ptr--;",
			"}",
		]
	},
	"queue": {
		"prefix": "queue",
		"body": [
			"#define QUEUESIZE 3",
			"",
			"typedef struct",
			"{",
			"    int* arr;",
			"    int front;",
			"    int rear;",
			"    int cap;",
			"    int size;",
			"}Queue;",
			"",
			"void requeue(Queue* old_queue);",
			"",
			"Queue* mkQueue()",
			"{",
			"    Queue* queue = (Queue*)malloc(sizeof(Queue));",
			"    queue->cap = QUEUESIZE;",
			"    queue->front = queue->size = 0;",
			"    queue->rear = QUEUESIZE - 1;",
			"    queue->arr = (int*)malloc(queue->cap * sizeof(int));",
			"    return queue;",
			"}",
			"",
			"int isFull(Queue* queue) { return (queue->size == queue->cap); }",
			"",
			"int isEmpty(Queue* queue) { return (queue->size == 0); }",
			"",
			"void enqueue(Queue* queue, int item)",
			"{",
			"    if (isFull(queue))",
			"        requeue(queue);",
			"    queue->rear = (queue->rear + 1) % queue->cap;",
			"    queue->arr[queue->rear] = item;",
			"    queue->size++;//size increases",
			"}",
			"",
			"int dequeue(Queue* queue)",
			"{",
			"    if (isEmpty(queue))",
			"        return INT_MIN;",
			"    int item = queue->arr[queue->front];",
			"    //",
			"    // queue->arr[queue->front] = 0;",
			"    //",
			"    queue->front = (queue->front + 1) % queue->cap;",
			"    queue->size--;//size decreases",
			"    return item;",
			"}",
			"",
			"int front(Queue* queue)",
			"{",
			"    if (isEmpty(queue))",
			"        return INT_MIN;",
			"    return queue->arr[queue->front];",
			"}",
			"",
			"int rear(Queue* queue)",
			"{",
			"    if (isEmpty(queue))",
			"        return INT_MIN;",
			"    return queue->arr[queue->rear];",
			"}",
			"",
			"void requeue(Queue* old_queue)",
			"{",
			"    int i;",
			"    int* arr = (int*)malloc(2 * (old_queue->cap) * sizeof(int));",
			"    for (i = 0; !isEmpty(old_queue); i++)",
			"        arr[i] = dequeue(old_queue);",
			"    free(old_queue->arr);",
			"    old_queue->arr = arr;",
			"    old_queue->front = 0;",
			"    old_queue->rear = i - 1;",
			"    old_queue->size = i;",
			"    old_queue->cap *= 2;",
			"}",
		]
	}
}